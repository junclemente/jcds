{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to jcds","text":"<p>jcds is a personal collection of reusable functions for data science and analysis.</p> <ul> <li>\ud83d\udcca EDA tools</li> <li>\ud83e\uddea Unit-tested utilities</li> <li>\u2601\ufe0f AWS integration</li> <li>\ud83d\udcda Auto-generated documentation</li> </ul> <p>Check out the API Reference to explore all available functions.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#eda-helpers","title":"EDA Helpers","text":""},{"location":"api/#jcds.eda.eda_helpers.count_cols_with_all_na","title":"<code>count_cols_with_all_na(dataframe)</code>","text":"<p>Counts the number of columns in the DataFrame where all values are missing (NaN).</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame.</p> <p>Returns: int: The number of columns where every row is NaN.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def count_cols_with_all_na(dataframe):\n    \"\"\"\n    Counts the number of columns in the DataFrame where all values are missing (NaN).\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n\n    Returns:\n    int: The number of columns where every row is NaN.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    return dataframe.isna().all(axis=0).sum()\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.count_cols_with_any_na","title":"<code>count_cols_with_any_na(dataframe)</code>","text":"<p>Counts the number of columns in the DataFrame that contain at least one missing (NaN) value.</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame.</p> <p>Returns: int: The number of columns with at least one NaN value.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def count_cols_with_any_na(dataframe):\n    \"\"\"\n    Counts the number of columns in the DataFrame that contain at least one missing (NaN) value.\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n\n    Returns:\n    int: The number of columns with at least one NaN value.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    return dataframe.isna().any(axis=0).sum()\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.count_rows_with_all_na","title":"<code>count_rows_with_all_na(dataframe)</code>","text":"<p>Counts the number of rows in the DataFrame where all values are missing (NaN).</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame.</p> <p>Returns: int: The number of rows where every column is NaN.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def count_rows_with_all_na(dataframe):\n    \"\"\"\n    Counts the number of rows in the DataFrame where all values are missing (NaN).\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n\n    Returns:\n    int: The number of rows where every column is NaN.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    return dataframe.isna().all(axis=1).sum()\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.count_rows_with_any_na","title":"<code>count_rows_with_any_na(dataframe)</code>","text":"<p>Counts the number of rows in the DataFrame that contain at least one missing (NaN) value.</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame.</p> <p>Returns: int: The number of rows with at least one NaN value.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def count_rows_with_any_na(dataframe):\n    \"\"\"\n    Counts the number of rows in the DataFrame that contain at least one missing (NaN) value.\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n\n    Returns:\n    int: The number of rows with at least one NaN value.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    return dataframe.isna().any(axis=1).sum()\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.count_total_na","title":"<code>count_total_na(dataframe)</code>","text":"<p>Calculates the total number of missing (NaN) values in the entire DataFrame.</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame.</p> <p>Returns: int: The total count of NaN values in the DataFrame.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def count_total_na(dataframe):\n    \"\"\"\n    Calculates the total number of missing (NaN) values in the entire DataFrame.\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n\n    Returns:\n    int: The total count of NaN values in the DataFrame.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    return dataframe.isna().sum().sum()\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.count_unique_values","title":"<code>count_unique_values(dataframe, columns)</code>","text":"<p>Counts the number of unique values in the specified columns of a DataFrame, including NaNs.</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame. columns (list): A list of column names for which to count unique values.</p> <p>Returns: dict: A dictionary where each key is a column name and the value is the count of unique entries, including NaNs.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def count_unique_values(dataframe, columns):\n    \"\"\"\n    Counts the number of unique values in the specified columns of a DataFrame, including NaNs.\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n    columns (list): A list of column names for which to count unique values.\n\n    Returns:\n    dict: A dictionary where each key is a column name and the value is the count of unique entries, including NaNs.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    unique_counts = {}\n    for col in columns:\n        count = dataframe[col].nunique(dropna=False)\n        unique_counts[col] = count\n    return unique_counts\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.show_binary_list","title":"<code>show_binary_list(dataframe, dropna=True)</code>","text":"<p>Identifies binary columns in a DataFrame, optionally considering missing values.</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame. dropna (bool): If True, NaN values are excluded when determining binary columns. Default is True.</p> <p>dict: A dictionary with two keys:     - \"binary_columns\": list of columns that contain exactly two unique non-null values.     - \"binary_with_nan\": list of columns that have two unique non-null values and also include NaNs.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def show_binary_list(dataframe, dropna=True):\n    \"\"\"\n    Identifies binary columns in a DataFrame, optionally considering missing values.\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n    dropna (bool): If True, NaN values are excluded when determining binary columns. Default is True.\n\n    Returns:\n    dict: A dictionary with two keys:\n        - \"binary_columns\": list of columns that contain exactly two unique non-null values.\n        - \"binary_with_nan\": list of columns that have two unique non-null values and also include NaNs.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    binary_cols = []\n    binary_with_nan = []\n    for col in dataframe.columns:\n        unique_vals = dataframe[col].unique()\n        unique_vals_no_nan = pd.Series(unique_vals).dropna().unique()\n\n        if len(unique_vals_no_nan) == 2:\n            if pd.isna(unique_vals).any():\n                binary_with_nan.append(col)\n            else:\n                binary_cols.append(col)\n\n    return {\"binary_columns\": binary_cols, \"binary_with_nan\": binary_with_nan}\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.show_catvar","title":"<code>show_catvar(dataframe)</code>","text":"<p>Identifies and returns a list of categorical variables in the DataFrame.</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame.</p> <p>Returns: list: A list of column names that have categorical or object data types.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def show_catvar(dataframe):\n    \"\"\"\n    Identifies and returns a list of categorical variables in the DataFrame.\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n\n    Returns:\n    list: A list of column names that have categorical or object data types.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    cat_features = dataframe.select_dtypes(\n        include=[\"category\", \"object\"]\n    ).columns.tolist()\n    return cat_features\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.show_convar","title":"<code>show_convar(dataframe)</code>","text":"<p>Identifies and returns a list of continuous (non-categorical) variables in the DataFrame.</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame.</p> <p>Returns: list: A list of column names that are not of categorical or object data types.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def show_convar(dataframe):\n    \"\"\"\n    Identifies and returns a list of continuous (non-categorical) variables in the DataFrame.\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n\n    Returns:\n    list: A list of column names that are not of categorical or object data types.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    cont_features = dataframe.select_dtypes(\n        exclude=[\"category\", \"object\"]\n    ).columns.tolist()\n    return cont_features\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.show_dupes","title":"<code>show_dupes(dataframe)</code>","text":"<p>Returns the number of duplicate rows in the given DataFrame.</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame.</p> <p>Returns: int: The count of duplicated rows in the DataFrame.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def show_dupes(dataframe):\n    \"\"\"\n    Returns the number of duplicate rows in the given DataFrame.\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n\n    Returns:\n    int: The count of duplicated rows in the DataFrame.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    dupes = dataframe.duplicated()\n    return dupes.sum()\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.show_lowcardvars","title":"<code>show_lowcardvars(dataframe, max_unique=10)</code>","text":"<p>Returns a list of categorical variables with unique values less than or equal to the specified threshold.</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame. max_unique (int): The maximum number of unique values allowed for a variable to be considered low cardinality. Default is 10.</p> <p>Returns: list: A list of tuples where each tuple contains the column name and the number of unique values.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def show_lowcardvars(dataframe, max_unique=10):\n    \"\"\"\n    Returns a list of categorical variables with unique values less than or equal to the specified threshold.\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n    max_unique (int): The maximum number of unique values allowed for a variable to be considered low cardinality. Default is 10.\n\n    Returns:\n    list: A list of tuples where each tuple contains the column name and the number of unique values.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    print(f\"Showing cat var of cardinality &lt;= {max_unique}\")\n    col_list = []\n    cols = show_catvar(dataframe)\n    for col in cols:\n        count = dataframe[col].nunique()\n        if count &lt;= max_unique:\n            col_list.append((col, count))\n    return col_list\n</code></pre>"},{"location":"api/#jcds.eda.eda_helpers.show_shape","title":"<code>show_shape(dataframe)</code>","text":"<p>Returns the shape (number of rows and columns) of the given DataFrame.</p> <p>Parameters: dataframe (pd.DataFrame): The input pandas DataFrame.</p> <p>Returns: tuple: A tuple containing the number of rows and columns in the DataFrame.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/eda_helpers.py</code> <pre><code>def show_shape(dataframe):\n    \"\"\"\n    Returns the shape (number of rows and columns) of the given DataFrame.\n\n    Parameters:\n    dataframe (pd.DataFrame): The input pandas DataFrame.\n\n    Returns:\n    tuple: A tuple containing the number of rows and columns in the DataFrame.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    return dataframe.shape\n</code></pre>"},{"location":"api/#column-utilities","title":"Column Utilities","text":""},{"location":"api/#jcds.eda.lists.get_cat_list","title":"<code>get_cat_list(dataframe)</code>","text":"<p>Returns a list of categorical column names or the subset of the DataFrame containing only categorical columns.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>The DataFrame to analyze.</p> required <code>return_names</code> <code>bool</code> <p>If True, returns a list of column names.                  If False, returns a DataFrame slice.</p> required <p>Returns:</p> Type Description <p>list or pd.DataFrame: Categorical column names or DataFrame with categorical columns.</p> Source code in <code>jcds/eda/lists.py</code> <pre><code>def get_cat_list(dataframe):\n    \"\"\"\n    Returns a list of categorical column names or the subset of the DataFrame\n    containing only categorical columns.\n\n    Args:\n        dataframe (pd.DataFrame): The DataFrame to analyze.\n        return_names (bool): If True, returns a list of column names.\n                             If False, returns a DataFrame slice.\n\n    Returns:\n        list or pd.DataFrame: Categorical column names or DataFrame with categorical columns.\n    \"\"\"\n    cat_list = dataframe.select_dtypes(include=[\"category\", \"object\"]).columns.tolist()\n    return cat_list\n</code></pre>"},{"location":"api/#jcds.eda.lists.get_cont_list","title":"<code>get_cont_list(dataframe)</code>","text":"<p>Returns a list of continuous (non-categorical) column names or the subset of the DataFrame containing only continuous columns.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>The DataFrame to analyze.</p> required <code>return_names</code> <code>bool</code> <p>If True, returns a list of column names.                  If False, returns a DataFrame slice.</p> required <p>Returns:</p> Type Description <p>list or pd.DataFrame: Continuous column names or DataFrame with continuous columns.</p> Source code in <code>jcds/eda/lists.py</code> <pre><code>def get_cont_list(dataframe):\n    \"\"\"\n    Returns a list of continuous (non-categorical) column names or the subset of the DataFrame\n    containing only continuous columns.\n\n    Args:\n        dataframe (pd.DataFrame): The DataFrame to analyze.\n        return_names (bool): If True, returns a list of column names.\n                             If False, returns a DataFrame slice.\n\n    Returns:\n        list or pd.DataFrame: Continuous column names or DataFrame with continuous columns.\n    \"\"\"\n    cont_list = dataframe.select_dtypes(exclude=[\"category\", \"object\"]).columns.tolist()\n    return cont_list\n</code></pre>"},{"location":"api/#quick-reports","title":"Quick Reports","text":""},{"location":"api/#jcds.eda.reports.display_all_col_head","title":"<code>display_all_col_head(dataframe, head=5)</code>","text":"<p>Displays the first few rows of a DataFrame with all columns visible, regardless of the number of columns in the DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>The DataFrame to display.</p> required <code>head</code> <code>int</code> <p>The number of rows to show from the top of the DataFrame.                   Defaults to 5.</p> <code>5</code> Notes <ul> <li>Temporarily sets the pandas display option to show all columns.</li> <li>Uses IPython's display() function for cleaner notebook output.</li> </ul> <p>Returns:</p> Type Description <p>None</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/reports.py</code> <pre><code>def display_all_col_head(dataframe, head=5):\n    \"\"\"\n    Displays the first few rows of a DataFrame with all columns visible, regardless of\n    the number of columns in the DataFrame.\n\n    Args:\n        dataframe (pd.DataFrame): The DataFrame to display.\n        head (int, optional): The number of rows to show from the top of the DataFrame.\n                              Defaults to 5.\n\n    Notes:\n        - Temporarily sets the pandas display option to show all columns.\n        - Uses IPython's display() function for cleaner notebook output.\n\n    Returns:\n        None\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    with pd.option_context(\"display.max_columns\", None):\n        display(dataframe.head(head))\n\n    return\n</code></pre>"},{"location":"api/#jcds.eda.reports.dqr_cat","title":"<code>dqr_cat(dataframe)</code>","text":"<p>Generates a data quality report for categorical features in a given DataFrame.</p> <p>This function calculates and prints the following metrics for each feature in the provided list: - Total count of non-missing values - Total count of missing values - Percentage of missing values - Cardinality (number of unique values) - Mode 1 (most frequent value) and its frequency and percentage - Mode 2 (second most frequent value) and its frequency and percentage - Descriptive statistics for each feature</p>"},{"location":"api/#jcds.eda.reports.dqr_cat--parameters","title":"Parameters:","text":"<p>dataframe : pandas.DataFrame     The DataFrame containing the data to be analyzed. list_of_features : list of str     The list of column names (features) for which the data quality report is generated.</p>"},{"location":"api/#jcds.eda.reports.dqr_cat--returns","title":"Returns:","text":"<p>None     This function prints the data quality report to the console.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/reports.py</code> <pre><code>def dqr_cat(dataframe):\n    \"\"\"\n    Generates a data quality report for categorical features in a given DataFrame.\n\n    This function calculates and prints the following metrics for each feature in the provided list:\n    - Total count of non-missing values\n    - Total count of missing values\n    - Percentage of missing values\n    - Cardinality (number of unique values)\n    - Mode 1 (most frequent value) and its frequency and percentage\n    - Mode 2 (second most frequent value) and its frequency and percentage\n    - Descriptive statistics for each feature\n\n    Parameters:\n    -----------\n    dataframe : pandas.DataFrame\n        The DataFrame containing the data to be analyzed.\n    list_of_features : list of str\n        The list of column names (features) for which the data quality report is generated.\n\n    Returns:\n    --------\n    None\n        This function prints the data quality report to the console.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    # Initialize variables\n    round_to = 2\n    list_feature_name = []\n    list_count = []\n    list_missing = []\n    list_percent = []\n    list_cardinality = []\n    list_mode1 = []\n    list_mode1_freq = []\n    list_mode1_perc = []\n    list_mode2 = []\n    list_mode2_freq = []\n    list_mode2_perc = []\n\n    # Create list of non-categorical values\n    list_of_features = dataframe.select_dtypes(\n        include=[\"category\", \"object\"]\n    ).columns.tolist()\n\n    # Total rows\n    total_rows = dataframe.shape[0]\n\n    if len(list_of_features) == 0:\n        print(\"This dataset does not have any categorical columns.\")\n        return\n\n    print(\"The categorical features are: \")\n    print(list_of_features)\n\n    for feature in list_of_features:\n\n        total_count = dataframe[feature].count()\n        total_missing = dataframe[feature].isnull().sum()\n        percent_missing = np.round(total_missing / total_rows * 100, round_to)\n        cardinality = len(dataframe[feature].unique())\n\n        # Use value counts to get modes\n        results = dataframe[feature].value_counts()\n        # Calculate mode\n        mode1_name = results.index[0]\n        mode1_count = results.iloc[0]\n        mode1_percent = np.round((mode1_count / total_count) * 100, round_to)\n\n        # Initialize mode 2 variables\n        mode2_name = None\n        mode2_count = 0\n        mode2_percent = 0.0\n\n        # Calculate 2nd mode if it exists\n        if len(results) &gt; 1:\n            mode2_name = results.index[1]\n            mode2_count = results.iloc[1]\n            mode2_percent = np.round((mode2_count / total_count) * 100, round_to)\n\n        # Append results to lists\n        list_feature_name.append(feature)\n        list_count.append(total_count)\n        list_missing.append(total_missing)\n        list_percent.append(percent_missing)\n        list_cardinality.append(cardinality)\n        list_mode1.append(mode1_name)\n        list_mode1_freq.append(mode1_count)\n        list_mode1_perc.append(mode1_percent)\n        list_mode2.append(mode2_name)\n        list_mode2_freq.append(mode2_count)\n        list_mode2_perc.append(mode2_percent)\n\n    # Create dataframes\n    data = {\n        \"Feature\": list_feature_name,\n        \"Count\": list_count,\n        \"Missing\": list_missing,\n        \"% Missing\": list_percent,\n        \"Cardinality\": list_cardinality,\n    }\n\n    data_mode1 = {\n        \"Feature\": list_feature_name,\n        \"Mode 1\": list_mode1,\n        \"Mode 1 Freq.\": list_mode1_freq,\n        \"Mode 1 %\": list_mode1_perc,\n    }\n\n    data_mode2 = {\n        \"Feature\": list_feature_name,\n        \"Mode 2\": list_mode2,\n        \"Mode 2 Freq.\": list_mode2_freq,\n        \"Mode 2 %\": list_mode2_perc,\n    }\n\n    df = pd.DataFrame(data)\n    df1 = pd.DataFrame(data_mode1)\n    df2 = pd.DataFrame(data_mode2)\n\n    # Get descriptive statistics and transpose\n    stats = dataframe[list_of_features].describe(include=\"object\")\n    transposed_stats = stats.T\n\n    # Print results\n    print(\"Data Quality Report for Categorical Features\")\n    print(f\"Total features: {len(list_of_features)} / {total_rows} rows\")\n    print(\"============================================\")\n    print(\"Stats\")\n    print(\"-----\")\n    display(df)\n\n    print(\"\\n\")\n    print(\"Mode 1\")\n    print(\"------\")\n    display(df1)\n\n    print(\"\\n\")\n    print(\"Mode 2\")\n    print(\"------\")\n    display(df2)\n\n    print(\"\\n\")\n    print(\"Descriptive Stats\")\n    print(\"-----------------\")\n    display(transposed_stats)\n\n    return\n</code></pre>"},{"location":"api/#jcds.eda.reports.dqr_cont","title":"<code>dqr_cont(dataframe)</code>","text":"<p>Generates a data quality report for continuous features in a given DataFrame.</p> <p>This function calculates and prints the following metrics for each feature in the provided list: - Total count of non-missing values - Total count of missing values - Percentage of missing values - Cardinality (number of unique values) - Descriptive statistics (e.g., mean, standard deviation, min, max) for each feature</p>"},{"location":"api/#jcds.eda.reports.dqr_cont--parameters","title":"Parameters:","text":"<p>dataframe : pandas.DataFrame     The DataFrame containing the data to be analyzed. list_of_features : list of str     The list of column names (features) for which the data quality report is generated.</p>"},{"location":"api/#jcds.eda.reports.dqr_cont--returns","title":"Returns:","text":"<p>None     This function prints the data quality report to the console.</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/reports.py</code> <pre><code>def dqr_cont(dataframe):\n    \"\"\"\n    Generates a data quality report for continuous features in a given DataFrame.\n\n    This function calculates and prints the following metrics for each feature in the provided list:\n    - Total count of non-missing values\n    - Total count of missing values\n    - Percentage of missing values\n    - Cardinality (number of unique values)\n    - Descriptive statistics (e.g., mean, standard deviation, min, max) for each feature\n\n    Parameters:\n    -----------\n    dataframe : pandas.DataFrame\n        The DataFrame containing the data to be analyzed.\n    list_of_features : list of str\n        The list of column names (features) for which the data quality report is generated.\n\n    Returns:\n    --------\n    None\n        This function prints the data quality report to the console.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    # Initialize variables\n    round_to = 2\n    list_feature_name = []\n    list_count = []\n    list_missing = []\n    list_percent = []\n    list_cardinality = []\n\n    # Create list of non-categorical values\n    list_of_features = dataframe.select_dtypes(\n        exclude=[\"category\", \"object\"]\n    ).columns.tolist()\n\n    # Total rows\n    total_rows = dataframe.shape[0]\n\n    if len(list_of_features) == 0:\n        print(\"This dataset does not have any non-categorical features.\")\n        return\n\n    print(\"The non-categorical features are: \")\n    print(list_of_features)\n\n    for feature in list_of_features:\n        # Get stats for each feature\n        total_count = dataframe[feature].count()\n        total_missing = dataframe[feature].isnull().sum()\n        percent_missing = total_missing / total_rows * 100\n        cardinality = len(dataframe[feature].unique())\n\n        # Append result to variables\n        list_feature_name.append(feature)\n        list_count.append(total_count)\n        list_missing.append(total_missing)\n        list_percent.append(np.round(percent_missing, round_to))\n        list_cardinality.append(cardinality)\n\n    # Create dataframe\n    data = {\n        \"Feature\": list_feature_name,\n        \"Count\": list_count,\n        \"Missing\": list_missing,\n        \"% missing\": list_percent,\n        \"Cardinality\": list_cardinality,\n    }\n    df = pd.DataFrame(data)\n\n    # Get descriptive statistics and transpose\n    stats = np.round(dataframe[list_of_features].describe(), round_to)\n    transposed_stats = stats.T\n\n    # Print results\n    print(\"Data Quality for Continous Features\")\n    print(f\"Total Features: {len(list_of_features)} / {total_rows} rows\")\n    display(df)\n\n    print(\"\\n\")\n    print(\"Descriptive Stats\")\n    display(transposed_stats)\n\n    return\n</code></pre>"},{"location":"api/#jcds.eda.reports.long_report","title":"<code>long_report(dataframe)</code>","text":"<p>Generates a detailed summary report of a pandas DataFrame, including shape, missing value statistics, and a breakdown of categorical and continuous features with their unique value counts.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>The input DataFrame to analyze.</p> required Prints <ul> <li>Total number of columns and rows</li> <li>Number and percentage of rows that are entirely missing</li> <li>Number and percentage of columns with any missing values</li> <li>Total number of missing values in the dataset</li> <li>Count of categorical and continuous features</li> <li>For each categorical and continuous feature: number of unique values</li> </ul> Notes <ul> <li>Categorical features are detected based on 'object' and 'category' dtypes.</li> <li>Continuous features include all other non-categorical dtypes.</li> <li>Missing value percentages are rounded to two decimal places.</li> <li>A placeholder for <code>.info(memory_usage='deep')</code> is printed but not executed.</li> </ul> <p>Returns:</p> Type Description <p>None</p> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/reports.py</code> <pre><code>def long_report(dataframe):\n    \"\"\"\n    Generates a detailed summary report of a pandas DataFrame, including shape,\n    missing value statistics, and a breakdown of categorical and continuous features\n    with their unique value counts.\n\n    Args:\n        dataframe (pd.DataFrame): The input DataFrame to analyze.\n\n    Prints:\n        - Total number of columns and rows\n        - Number and percentage of rows that are entirely missing\n        - Number and percentage of columns with any missing values\n        - Total number of missing values in the dataset\n        - Count of categorical and continuous features\n        - For each categorical and continuous feature: number of unique values\n\n    Notes:\n        - Categorical features are detected based on 'object' and 'category' dtypes.\n        - Continuous features include all other non-categorical dtypes.\n        - Missing value percentages are rounded to two decimal places.\n        - A placeholder for `.info(memory_usage='deep')` is printed but not executed.\n\n    Returns:\n        None\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    ROUND = 2\n    # Get features not labeled as categorical\n    cat_features = dataframe.select_dtypes(\n        include=[\"category\", \"object\"]\n    ).columns.tolist()\n    # Get features labeled as categorical\n    cont_features = dataframe.select_dtypes(\n        exclude=[\"category\", \"object\"]\n    ).columns.tolist()\n    # Get shape, total rows and cols\n    total_rows = dataframe.shape[0]\n    total_cols = dataframe.shape[1]\n    # Count/% rows that are missing values\n    rows_with_all_na = dataframe.isna().all(axis=1).sum()\n    percent_na_rows = np.round(rows_with_all_na / total_rows * 100, ROUND)\n    # Count/% cols that are missing values\n    cols_with_na = dataframe.isna().any(axis=0).sum()\n    percent_na_cols = np.round(cols_with_na / total_cols * 100, ROUND)\n    total_na = dataframe.isna().sum().sum()\n\n    print(\"============================================\")\n    print(\"Quick Report - info(memory_usage='deep')\")\n    print(f\"Total cols: {total_cols}\")\n    print(f\"Rows missing all values: {rows_with_all_na} ({percent_na_rows}%)\")\n    print(f\"Total Rows: {total_rows}\")\n    print(f\"Cols with missing values: {cols_with_na} ({percent_na_cols}%)\")\n    print(f\"Total missing values in dataset: {total_na}\")\n    print(\"============================================\")\n    print(f\"Categorical features: {len(cat_features)}\")\n    for cat in cat_features:\n        num_unique = dataframe[cat].unique()\n        print(f\"- {cat}: {len(num_unique)} unique values\")\n    print(\"============================================\")\n    print(f\"Continuous features: {len(cont_features)}\")\n    for cont in cont_features:\n        num_unique = dataframe[cont].unique()\n        print(f\"- {cont}: {len(num_unique)} unique values\")\n\n    # info = dataframe.info(memory_usage='deep')\n    # display(info)\n    return\n</code></pre>"},{"location":"api/#jcds.eda.reports.quick_report","title":"<code>quick_report(dataframe)</code>","text":"<p>Generates a quick summary report of a pandas DataFrame, including basic shape, missing value statistics, and memory usage information.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>The input DataFrame to analyze.</p> required Prints <ul> <li>Total number of columns and rows</li> <li>Number and percentage of rows that are entirely missing</li> <li>Number and percentage of columns that have any missing values</li> <li>Total number of missing values in the dataset</li> <li>Output of DataFrame info with memory usage ('deep')</li> </ul> Notes <ul> <li>Categorical and continuous feature identification is performed but not displayed.</li> <li>Missing value calculations are rounded to two decimal places.</li> </ul> <p>Docstring generated by ChatGPT.</p> Source code in <code>jcds/eda/reports.py</code> <pre><code>def quick_report(dataframe):\n    \"\"\"\n    Generates a quick summary report of a pandas DataFrame, including basic shape,\n    missing value statistics, and memory usage information.\n\n    Args:\n        dataframe (pd.DataFrame): The input DataFrame to analyze.\n\n    Prints:\n        - Total number of columns and rows\n        - Number and percentage of rows that are entirely missing\n        - Number and percentage of columns that have any missing values\n        - Total number of missing values in the dataset\n        - Output of DataFrame info with memory usage ('deep')\n\n    Notes:\n        - Categorical and continuous feature identification is performed but not displayed.\n        - Missing value calculations are rounded to two decimal places.\n\n    Docstring generated by ChatGPT.\n    \"\"\"\n    ROUND = 2\n    # Get features not labeled as categorical\n    cat_features = dataframe.select_dtypes(\n        include=[\"category\", \"object\"]\n    ).columns.tolist()\n    # Get features labeled as categorical\n    cont_features = dataframe.select_dtypes(\n        exclude=[\"category\", \"object\"]\n    ).columns.tolist()\n    # Get shape, total rows and cols\n    total_rows = dataframe.shape[0]\n    total_cols = dataframe.shape[1]\n    # Count/% rows that are missing values\n    rows_with_all_na = dataframe.isna().all(axis=1).sum()\n    percent_na_rows = np.round(rows_with_all_na / total_rows * 100, ROUND)\n    # Count/% cols that are missing values\n    cols_with_na = dataframe.isna().any(axis=0).sum()\n    percent_na_cols = np.round(cols_with_na / total_cols * 100, ROUND)\n    total_na = dataframe.isna().sum().sum()\n\n    print(\"============================================\")\n    print(\"Quick Report - info(memory_usage='deep')\")\n    print(f\"Total cols: {total_cols}\")\n    print(f\"Rows missing all values: {rows_with_all_na} ({percent_na_rows}%)\")\n    print(f\"Total Rows: {total_rows}\")\n    print(f\"Cols with missing values: {cols_with_na} ({percent_na_cols}%)\")\n    print(f\"Total missing values in dataset: {total_na}\")\n    print(\"============================================\")\n</code></pre>"},{"location":"api/#jcds-package-overview","title":"jcds Package Overview","text":"<p>options: members: - help</p>"},{"location":"api/#jcds.help","title":"<code>help(func_name=None)</code>","text":"<p>Global help function for the jcds package.</p> <ul> <li>Call help() to list all public functions from all submodules.</li> <li>Call help('function_name') to view its documentation.</li> </ul> Source code in <code>jcds/__init__.py</code> <pre><code>def help(func_name=None):\n    \"\"\"\n    Global help function for the jcds package.\n\n    - Call help() to list all public functions from all submodules.\n    - Call help('function_name') to view its documentation.\n    \"\"\"\n    functions = {}\n\n    # Dynamically import and inspect all top-level jcds submodules\n    for _, mod_name, _ in pkgutil.iter_modules(jcds.__path__):\n        full_name = f\"jcds.{mod_name}\"\n        try:\n            module = importlib.import_module(full_name)\n\n            if hasattr(module, \"__all__\"):\n                for name in module.__all__:\n                    obj = getattr(module, name, None)\n                    if callable(obj) and name != \"help\":\n                        functions[name] = obj\n        except Exception as e:\n            print(f\"[Warning] Could not load module {full_name}: {e}\")\n\n    if func_name is None:\n        if not functions:\n            print(\"No functions found in jcds.\")\n        else:\n            print(\"Available functions in jcds:\")\n            for name in sorted(functions):\n                print(f\"  - {name}\")\n            print('\\nUse jcds.help(\"function_name\") to see its documentation.')\n    else:\n        func = functions.get(func_name)\n        if func:\n            print(f\"\\nHelp for '{func_name}':\\n\")\n            print(inspect.getdoc(func) or \"(No docstring provided)\")\n        else:\n            print(f\"Function '{func_name}' not found.\")\n</code></pre>"}]}