def dqr_cont(dataframe):
    """
    Generates a data quality report for continuous features in a given DataFrame.

    This function calculates and prints the following metrics for each feature in the provided list:
    - Total count of non-missing values
    - Total count of missing values
    - Percentage of missing values
    - Cardinality (number of unique values)
    - Descriptive statistics (e.g., mean, standard deviation, min, max) for each feature

    Parameters:
    -----------
    dataframe : pandas.DataFrame
        The DataFrame containing the data to be analyzed.
    list_of_features : list of str
        The list of column names (features) for which the data quality report is generated.

    Returns:
    --------
    None
        This function prints the data quality report to the console.

    Docstring generated by ChatGPT.
    """
    # Initialize variables
    round_to = 2
    list_feature_name = []
    list_count = []
    list_missing = []
    list_percent = []
    list_cardinality = []

    # Create list of non-categorical values
    list_of_features = dataframe.select_dtypes(
        exclude=['category', 'object']).columns.tolist()

    if len(list_of_features ) == 0:
        print("This dataset does not have any non-categorical features.")
        return

    print("The non-categorical features are: ")
    print(list_of_features)

    for feature in list_of_features:
        # Get stats for each feature
        total_count = dataframe[feature].count()
        total_missing = dataframe[feature].isnull().sum()
        percent_missing = total_missing/total_count * 100
        cardinality = len(dataframe[feature].unique())

        # Append result to variables
        list_feature_name.append(feature)
        list_count.append(total_count)
        list_missing.append(total_missing)
        list_percent.append(np.round(percent_missing, round_to))
        list_cardinality.append(cardinality)

    # Create dataframe
    data = {
        "Feature": list_feature_name,
        "Count": list_count,
        "Missing": list_missing,
        "% missing": list_percent,
        "Cardinality": list_cardinality
    }
    df = pd.DataFrame(data)

    # Get descriptive statistics and transpose
    stats = np.round(dataframe[list_of_features].describe(), round_to)
    transposed_stats = stats.T

    # Print results
    print("Data Quality for Continous Features")
    print(f'Total Features: {len(list_of_features)}')
    print(df)

    print("\n")
    print("Descriptive Stats")
    print(transposed_stats)

    return